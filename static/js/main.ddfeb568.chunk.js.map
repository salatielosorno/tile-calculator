{"version":3,"sources":["components/canvas/Canvas.js","components/figure/Figure.js","components/thumbnail/Thumbnail.js","components/thumbnail-tools/Thumbnail-tools.js","components/screen/title-screen/title-screen.js","components/screen/button/button.js","components/screen/alert/alert.js","pages/calculator/Calculator.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","draw","ref","useRef","useEffect","ctx","current","getContext","width","height","style","Figure","kind","x","y","useState","setDraw","clearRect","fillStyle","fillRect","strokeRect","beginPath","moveTo","lineTo","fill","stroke","closePath","z","Thumbnail","className","index","isActive","onClick","handleClick","ThumbnailTools","setIsActive","tools","map","tool","TitleScreen","text","Button","Alert","title","description","role","decimalPattern","step","Calculator","setKind","area","setArea","setWidth","setHeight","tile","setTile","nextStep","setNextStep","tilePerformance","setTilePerformance","boxToBuy","setBoxToBuy","showAlert","setShowAlert","thumb","calculate","Math","round","Number","EPSILON","calculateArea","calculateTileNeeded","getBoxToBuy","ceil","calculateBoxToBuy","htmlFor","id","type","value","onChange","e","target","test","pattern","Swal","fire","position","showConfirmButton","timer","renderStep","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEaA,EAAS,SAACC,GAAW,IACtBC,EAASD,EAATC,KACJC,EAAMC,mBAYV,OAVAC,qBAAU,WACN,IACIC,EADSH,EAAII,QACAC,WAAW,MAGxBN,EAAKI,KAIX,CAACJ,IAEC,wBACIC,IAAKA,EACLM,MAAOR,EAAMQ,MACbC,OAAQT,EAAMS,OACdC,MAAO,CAAC,QAAU,YClBjBC,EAAS,SAACX,GAAW,IACtBY,EAASZ,EAATY,KACFJ,EAAQR,EAAMa,EACdJ,EAAST,EAAMc,EAHQ,EAMLC,oBAAS,SAACV,OANL,mBAMtBJ,EANsB,KAMhBe,EANgB,KAuC7B,OA/BAZ,qBAAU,WACN,OAAQQ,GACJ,IAAK,SACDI,GAAQ,SAACX,GAAD,OAAS,SAACA,GACdA,EAAIY,UAAU,EAAG,EAAGT,EAAOC,GAC3BJ,EAAIa,UAAY,QAChBb,EAAIc,SAAS,EAAG,EAAGnB,EAAMa,EAAGb,EAAMc,GAClCT,EAAIa,UAAY,QAChBb,EAAIe,WAAW,EAAG,EAAGpB,EAAMa,EAAGb,EAAMc,OAExC,MACJ,IAAK,WACDE,GAAQ,SAACX,GAAD,OAAS,SAACA,GACdA,EAAIY,UAAU,EAAG,EAAGT,EAAOC,GAC3BJ,EAAIgB,YACJhB,EAAIiB,OAAO,EAAG,GACdjB,EAAIkB,OAAOvB,EAAMa,EAAGb,EAAMc,GAC1BT,EAAIkB,OAAO,EAAGvB,EAAMc,GACpBT,EAAIa,UAAY,QAChBb,EAAImB,OACJnB,EAAIa,UAAY,QAChBb,EAAIkB,OAAO,EAAG,GACdlB,EAAIoB,SACJpB,EAAIqB,mBAMjB,CAACd,EAAMZ,EAAMa,EAAGb,EAAMc,EAAGd,EAAM2B,EAAGnB,EAAOC,IAGxC,8BAEIR,EACA,cAAC,EAAD,CAAQA,KAAMA,EAAMO,MAAOA,EAAOC,OAAQA,IACxC,6CC5CDmB,EAAY,SAAC5B,GACtB,OACI,sBACI6B,UAAS,0FAAqF7B,EAAM8B,QAAU9B,EAAM+B,SAAW,2BAA4B,IAC3JC,QAAS,WACLhC,EAAMiC,YAAYjC,IAH1B,UAMI,4BAAIA,EAAMY,OACV,cAAC,EAAD,CACIA,KAAMZ,EAAMY,KACZC,EAAGb,EAAMa,EACTC,EAAGd,EAAMc,QCZZoB,EAAiB,SAAAlC,GAAU,IAAD,EACHe,qBADG,mBAC5BgB,EAD4B,KAClBI,EADkB,KAEnC,OAAO,mCAECnC,EAAMoC,MACFpC,EAAMoC,MAAMC,KAAI,SAACC,EAAMR,GAAP,OAChB,qBAEID,UAAU,eACVG,QAAS,WAAKG,EAAYL,IAH9B,SAKI,cAAC,EAAD,CACIlB,KAAM0B,EAAK1B,KACXC,EAAGyB,EAAKzB,EACRC,EAAGwB,EAAKxB,EACRmB,YAAaK,EAAKL,YAClBH,MAAOA,EACPC,SAAUA,KAVTD,MAaL,uBCrBPS,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B,OAAO,mBAAGX,UAAU,mBAAb,SAAiCW,KCD/BC,EAAS,SAAC,GAA2B,IAAzBD,EAAwB,EAAxBA,KAAMP,EAAkB,EAAlBA,YAC3B,OACI,qBAAKJ,UAAU,mCAAf,SACI,wBACIA,UAAU,0HACVG,QAASC,EAFb,SAIKO,OCPJE,EAAQ,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC3B,OACI,sBAAKf,UAAU,2EAA2EgB,KAAK,QAA/F,UACI,mBAAGhB,UAAU,YAAb,SAA0Bc,IAC1B,4BAAIC,QCIVE,EAAiB,oBACjBC,EACa,eADbA,EAEc,gBAFdA,EAGgB,kBAHhBA,EAIW,aAGJC,EAAa,WAAO,IAAD,EACJjC,mBAAS,IADL,mBACrBH,EADqB,KACfqC,EADe,OAEJlC,mBAAS,GAFL,mBAErBmC,EAFqB,KAEfC,EAFe,OAGFpC,mBAAS,GAHP,mBAGrBP,EAHqB,KAGd4C,EAHc,OAIArC,mBAAS,GAJT,mBAIrBN,EAJqB,KAIb4C,EAJa,OAKJtC,mBAAS,GALL,mBAKrBuC,EALqB,KAKfC,EALe,OAMIxC,mBAASgC,GANb,mBAMrBS,EANqB,KAMXC,EANW,OAOkB1C,mBAAS,GAP3B,mBAOrB2C,EAPqB,KAOJC,EAPI,OAQI5C,mBAAS,GARb,mBAQrB6C,EARqB,KAQXC,EARW,OASM9C,oBAAS,GATf,mBASrB+C,EATqB,KASVC,EATU,KAWtB9B,EAAc,SAAC+B,GACjBf,EAAQe,EAAMpD,MACduC,EAAQ,GACRE,EAAU,GACVD,EAAS,GACTG,EAAQ,GACRI,EAAmB,GACnBE,EAAY,IAaVzB,EAAQ,CACV,CACIxB,KAAM,SACNC,EAAG,GACHC,EAAG,GACHmB,eAEJ,CACIrB,KAAM,WACNC,EAAG,GACHC,EAAG,GACHmB,gBAIFgC,EAAY,WACd,IAAMf,EC7De,SAACtC,EAAMJ,EAAOC,GACvC,IAAIyC,EACJ,OAAQtC,GACJ,IAAK,SACDsC,EAAO1C,EAAQC,EACf,MACJ,IAAK,WACDyC,EAAQ1C,EAAQC,EAAU,EAMlC,OADOyD,KAAKC,MAAgC,KAAzBjB,EAAOkB,OAAOC,UAAkB,IDiDlCC,CAAc1D,EAAMJ,EAAOC,GAClC6C,EC9CqB,SAACJ,GAChC,OAAOgB,KAAKC,MAAyC,KAA1B,KAAPjB,EAAekB,OAAOC,UAAkB,ID6C3CE,CAAoBrB,GACjCC,EAAQD,GACRK,EAAQD,IAGNkB,EAAc,WAChBX,ECxEyB,SAACP,EAAMI,GACpC,OAAOQ,KAAKO,KAAKP,KAAKC,MAAoD,KAA5Cb,EAAOI,EAAmBU,OAAOC,UAAkB,KDuEjEK,CAAkBpB,EAAMI,KAqLxC,OACI,sBAAK7B,UAAU,sBAAf,UACI,oBAAIA,UAAU,oCAAd,6BAlFW,WACf,OAAQ2B,GACJ,KAAKT,EACD,OACI,qCACI,cAAC,EAAD,CAAaP,KAAK,4BArG3B,mCACP,qBAAKX,UAAU,wCAAf,SACQ,cAAC,EAAD,CACIO,MAAOA,QAoGF0B,GAAa,cAAC,EAAD,CAAOtB,KAAK,QAAQI,YAAY,oBAC9C,cAAC,EAAD,CAAQJ,KAAK,WAAWP,YAAc,WACtB,KAATrB,GAIHmD,GAAa,GACbN,EAAYV,IAJRgB,GAAa,SAOjC,KAAKhB,EACD,OACI,qCACI,qBAAKlB,UAAU,mBAAf,SACI,cAAC,EAAD,CAAWjB,KAAMA,EAAMC,EAAG,GAAIC,EAAG,GAAImB,YAAa,iBAEtD,cAAC,EAAD,CAAaO,KAAK,2BA7G3B,qCACH,sBAAKX,UAAU,yBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,uBAAOA,UAAU,gEAAgE8C,QAAQ,QAAzF,qBAIJ,qBAAK9C,UAAU,WAAf,SACI,uBACIA,UAAU,sKACV+C,GAAG,QACHC,KAAK,OACLC,MAAOtE,EACPuE,SAAU,SAACC,IACe,IAAnBA,EAAEC,OAAOH,OAAkC,KAAnBE,EAAEC,OAAOH,OAAgBhC,EAAeoC,KAAKF,EAAEC,OAAOH,SAC7E1B,EAAS4B,EAAEC,OAAOH,eAMtC,sBAAKjD,UAAU,yBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,uBAAOA,UAAU,gEAAgE8C,QAAQ,QAAzF,qBAIJ,qBAAK9C,UAAU,WAAf,SACI,uBACIA,UAAU,sKACV+C,GAAG,QACHC,KAAK,OACLC,MAAOrE,EACPsE,SAAU,SAACC,IACe,IAAnBA,EAAEC,OAAOH,OAAkC,KAAnBE,EAAEC,OAAOH,OAAgBhC,EAAeoC,KAAKF,EAAEC,OAAOH,SAC7EzB,EAAU2B,EAAEC,OAAOH,QAG3BK,QAASrC,YAyERgB,GAAa,cAAC,EAAD,CAAOtB,KAAK,QAAQI,YAAY,mBAC9C,cAAC,EAAD,CAAQJ,KAAK,WAAWP,YAAc,WAC7BzB,EAAQ,GAAQC,EAAS,GAI9BsD,GAAa,GAEbE,IACAR,EAAYV,IANRgB,GAAa,SASjC,KAAKhB,EACD,OACI,qCACI,qBAAKlB,UAAU,mBAAf,SACI,cAAC,EAAD,CAAWjB,KAAMA,EAAMC,EAAG,GAAIC,EAAG,GAAImB,YAAa,iBAEtD,cAAC,EAAD,CAAaO,KAAK,2BAnF3B,mCACH,sBAAKX,UAAU,yBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,uBAAOA,UAAU,gEAAgE8C,QAAQ,kBAAzF,mCAIJ,qBAAK9C,UAAU,WAAf,SACI,uBACIA,UAAU,sKACV+C,GAAG,kBACHC,KAAK,OACLC,MAAOpB,EACPqB,SAAU,SAACC,IACe,IAAnBA,EAAEC,OAAOH,OAAkC,KAAnBE,EAAEC,OAAOH,OAAgBhC,EAAeoC,KAAKF,EAAEC,OAAOH,SAC7EnB,EAAmBqB,EAAEC,OAAOH,QAGpCK,QAASrC,WAmERgB,GAAa,cAAC,EAAD,CAAOtB,KAAK,QAAQI,YAAY,2BAC9C,cAAC,EAAD,CAAQJ,KAAK,WAAWP,YAAa,WAC9ByB,GAAmB,EAClBK,GAAa,IAGjBA,GAAa,GAEbqB,IAAKC,KAAK,CACNC,SAAU,eACV3C,MAAO,uCACP4C,mBAAmB,EACnBC,MAAO,OAEXhB,IACAf,EAAYV,UAG5B,KAAKA,EACD,OACI,qCACI,qBAAKlB,UAAU,mBAAf,SACI,cAAC,EAAD,CAAWjB,KAAMA,EAAMC,EAAG,GAAIC,EAAG,GAAImB,YAAa,iBAhFtE,mCACI,qBAAKJ,UAAU,wCAAf,SACI,gCACI,mBAAGA,UAAU,MAAb,yBAA6BqB,EAA7B,SACA,mBAAGrB,UAAU,MAAb,yBAA6ByB,EAA7B,SACA,mBAAGzB,UAAU,MAAb,6CAAiD6B,EAAjD,SACA,oBAAG7B,UAAU,MAAb,wBAA8B,sBAAMA,UAAU,YAAhB,uBAAoC+B,EAApC,YAAiDA,EAAW,EAAI,QAAU,SAAxG,qBA6EI,cAAC,EAAD,CAAQpB,KAAK,YAAYP,YAAa,WA3MtDgB,EAAQ,IACRE,EAAQ,GACRE,EAAU,GACVD,EAAS,GACTG,EAAQ,GACRI,EAAmB,GACnBE,EAAY,GAuMQJ,EAAYV,UAW3B0C,OEtPEC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ddfeb568.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\n\r\nexport const Canvas = (props) => {\r\n    const { draw } = props\r\n    let ref = useRef();\r\n    \r\n    useEffect(() => {\r\n        let canvas = ref.current;\r\n        let ctx = canvas.getContext('2d');\r\n\r\n        const render = () => {\r\n            draw(ctx);\r\n        }\r\n        render();\r\n\r\n    },[draw])\r\n    return (\r\n        <canvas\r\n            ref={ref}\r\n            width={props.width}\r\n            height={props.height}\r\n            style={{'display':'block'}}\r\n        />\r\n    );\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Canvas } from '../canvas/Canvas'\r\n\r\nexport const Figure = (props) => {\r\n    const { kind } = props;\r\n    const width = props.x;\r\n    const height = props.y;\r\n    const initialState = () => {};\r\n\r\n    const [draw, setDraw] = useState((ctx) => initialState(ctx));\r\n\r\n    useEffect(()=>{\r\n        switch (kind) {\r\n            case 'square':\r\n                setDraw((ctx) => (ctx) => {\r\n                    ctx.clearRect(0, 0, width, height);\r\n                    ctx.fillStyle = 'white';\r\n                    ctx.fillRect(0, 0, props.x, props.y);\r\n                    ctx.fillStyle = 'black';\r\n                    ctx.strokeRect(0, 0, props.x, props.y);\r\n                });\r\n                break;\r\n            case 'triangle':\r\n                setDraw((ctx) => (ctx) => {\r\n                    ctx.clearRect(0, 0, width, height);\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, 0);\r\n                    ctx.lineTo(props.x, props.y);\r\n                    ctx.lineTo(0, props.y);\r\n                    ctx.fillStyle = 'white';\r\n                    ctx.fill();\r\n                    ctx.fillStyle = 'black';\r\n                    ctx.lineTo(0, 0);\r\n                    ctx.stroke();\r\n                    ctx.closePath();\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [kind, props.x, props.y, props.z, width, height])\r\n    \r\n    return (\r\n        <div>\r\n        {\r\n            draw ?\r\n            <Canvas draw={draw} width={width} height={height}/>\r\n            : <div>Loading</div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Figure } from '../figure/Figure';\r\n\r\nexport const Thumbnail = (props) => {\r\n    return (\r\n        <div \r\n            className={`p-4 inline-block shadow m-2 cursor-pointer hover:bg-purple-700 hover:text-white ${props.index === props.isActive ? 'bg-purple-700 text-white': ''}`}\r\n            onClick={()=>{\r\n                props.handleClick(props)\r\n            }}\r\n        >\r\n            <p>{props.kind}</p>\r\n            <Figure \r\n                kind={props.kind} \r\n                x={props.x} \r\n                y={props.y}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Thumbnail } from '../thumbnail/Thumbnail';\r\n\r\nexport const ThumbnailTools = props => {\r\n    const [isActive, setIsActive] = useState()\r\n    return <>\r\n        {\r\n            props.tools ?\r\n                props.tools.map((tool, index) => \r\n                <div \r\n                    key={index} \r\n                    className='inline-block'\r\n                    onClick={()=>{setIsActive(index)}}\r\n                >\r\n                    <Thumbnail \r\n                        kind={tool.kind} \r\n                        x={tool.x} \r\n                        y={tool.y} \r\n                        handleClick={tool.handleClick}\r\n                        index={index}\r\n                        isActive={isActive}\r\n                    />\r\n                </div>\r\n                ) : 'tools not defined'\r\n        }\r\n    </>\r\n}\r\n","import React from 'react'\r\n\r\nexport const TitleScreen = ({ text }) => {\r\n    return <p className='mb-4 text-center'>{text}</p>;\r\n}\r\n","import React from 'react'\r\n\r\nexport const Button = ({ text, handleClick }) => {\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <button \r\n                className='shadow hover:bg-purple-700 bg-purple-500 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded' \r\n                onClick={handleClick}\r\n            >\r\n                {text}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Alert = ({ title, description }) => {\r\n    return (\r\n        <div className=\"bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mt-2 mb-4\" role=\"alert\">\r\n            <p className=\"font-bold\">{title}</p>\r\n            <p>{description}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport { ThumbnailTools } from '../../components/thumbnail-tools/Thumbnail-tools'\r\nimport { Thumbnail } from '../../components/thumbnail/Thumbnail';\r\nimport { TitleScreen } from '../../components/screen/title-screen/title-screen';\r\nimport { Button } from '../../components/screen/button/button';\r\nimport { Alert } from '../../components/screen/alert/alert';\r\nimport { calculateArea, calculateBoxToBuy, calculateTileNeeded } from '../../utils/utils';\r\n\r\nconst decimalPattern = /^\\d+(\\.\\d{0,2})?$/;\r\nconst step = {\r\n    CHOOSE_FIGURE: 'chooseFigure',\r\n    ENTER_MEASURES: 'enterMeasures',\r\n    TILE_PERFORMANCE: 'tilePerformance',\r\n    SHOW_RESULT: 'showResult'\r\n\r\n}\r\nexport const Calculator = () => {\r\n    const [kind, setKind] = useState('');\r\n    const [area, setArea] = useState(0);\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n    const [tile, setTile] = useState(0)\r\n    const [nextStep, setNextStep] = useState(step.CHOOSE_FIGURE);\r\n    const [tilePerformance, setTilePerformance] = useState(0);\r\n    const [boxToBuy, setBoxToBuy] = useState(0);\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    \r\n    const handleClick = (thumb) => {\r\n        setKind(thumb.kind);\r\n        setArea(0);\r\n        setHeight(0);\r\n        setWidth(0);\r\n        setTile(0);\r\n        setTilePerformance(0);\r\n        setBoxToBuy(0);\r\n    }\r\n\r\n    const cleanData = () => {\r\n        setKind('')\r\n        setArea(0);\r\n        setHeight(0);\r\n        setWidth(0);\r\n        setTile(0);\r\n        setTilePerformance(0);\r\n        setBoxToBuy(0);\r\n    }\r\n\r\n    const tools = [\r\n        {\r\n            kind: 'square',\r\n            x: 50,\r\n            y: 50,\r\n            handleClick,\r\n        },\r\n        {\r\n            kind: 'triangle',\r\n            x: 50,\r\n            y: 50,\r\n            handleClick,\r\n        }\r\n    ];\r\n\r\n    const calculate = () => {\r\n        const area = calculateArea(kind, width, height);\r\n        const tile = calculateTileNeeded(area);\r\n        setArea(area);\r\n        setTile(tile);\r\n    }\r\n\r\n    const getBoxToBuy = () => {\r\n        setBoxToBuy(calculateBoxToBuy(tile, tilePerformance));\r\n    }\r\n\r\n    //screens\r\n    const chooseFigure = () => {\r\n        return <>\r\n        <div className='flex items-center mb-6 justify-center'>\r\n                <ThumbnailTools \r\n                    tools={tools}\r\n                />\r\n        </div>\r\n        </>;\r\n    }\r\n    \r\n    const enterMeasures = () => {\r\n        return <>\r\n            <div className=\"flex items-center mb-6\">\r\n                <div className=\"md:w-1/3\">\r\n                    <label className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\" htmlFor=\"width\">\r\n                        Width\r\n                    </label>\r\n                </div>\r\n                <div className=\"md:w-2/3\">\r\n                    <input \r\n                        className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" \r\n                        id=\"width\" \r\n                        type=\"text\"\r\n                        value={width}\r\n                        onChange={(e) => {\r\n                            if(e.target.value === 0 || e.target.value === '' || decimalPattern.test(e.target.value)){\r\n                                setWidth(e.target.value)\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"flex items-center mb-6\">\r\n                <div className=\"md:w-1/3\">\r\n                    <label className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\" htmlFor=\"large\">\r\n                        Large\r\n                    </label>\r\n                </div>\r\n                <div className=\"md:w-2/3\">\r\n                    <input \r\n                        className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" \r\n                        id=\"large\" \r\n                        type=\"text\" \r\n                        value={height}\r\n                        onChange={(e) => {\r\n                            if(e.target.value === 0 || e.target.value === '' || decimalPattern.test(e.target.value)){\r\n                                setHeight(e.target.value)\r\n                            }\r\n                        }}\r\n                        pattern={decimalPattern}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    const enterTilePerfomance = () => {\r\n        return <>\r\n            <div className=\"flex items-center mb-6\">\r\n                <div className=\"md:w-1/3\">\r\n                    <label className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\" htmlFor=\"tilePerformance\">\r\n                        Performance per box\r\n                    </label>\r\n                </div>\r\n                <div className=\"md:w-2/3\">\r\n                    <input \r\n                        className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" \r\n                        id=\"tilePerformance\" \r\n                        type=\"text\"\r\n                        value={tilePerformance}\r\n                        onChange={(e) => {\r\n                            if(e.target.value === 0 || e.target.value === '' || decimalPattern.test(e.target.value)){\r\n                                setTilePerformance(e.target.value)\r\n                            }\r\n                        }}\r\n                        pattern={decimalPattern}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    const showResult = () => {\r\n        return (\r\n        <>\r\n            <div className='flex items-center mb-6 justify-center'>\r\n                <div>\r\n                    <p className='p-2'>{`Area: ${area} m2`}</p>\r\n                    <p className='p-2'>{`Tile: ${tile} m2`}</p>\r\n                    <p className='p-2'>{`Tile performance per box: ${tilePerformance} m2`}</p>\r\n                    <p className='p-2'>You should <span className='font-bold'>{`buy ${boxToBuy} ${ boxToBuy > 1 ? 'boxes' : 'box' }`}</span> of tile</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n        )\r\n    }\r\n\r\n    const renderStep = () => {\r\n        switch (nextStep) {\r\n            case step.CHOOSE_FIGURE:\r\n                return (\r\n                    <>\r\n                        <TitleScreen text='Choose the kind of area'/>\r\n                        {chooseFigure()}\r\n                        {showAlert && <Alert text='Await' description='Choose the kind'/>}\r\n                        <Button text='Continue' handleClick={ () => { \r\n                            if(kind === ''){\r\n                                setShowAlert(true);\r\n                                return;\r\n                            }\r\n                            setShowAlert(false);\r\n                            setNextStep(step.ENTER_MEASURES)\r\n                        }}/>\r\n                    </>);\r\n            case step.ENTER_MEASURES:\r\n                return (\r\n                    <>\r\n                        <div className='mb-4 text-center'>\r\n                            <Thumbnail kind={kind} x={50} y={50} handleClick={()=>{}}/>\r\n                        </div>\r\n                        <TitleScreen text='Enter measures: use m2'/>\r\n                        {enterMeasures()}\r\n                        {showAlert && <Alert text='Await' description='Enter measures'/>}\r\n                        <Button text='Continue' handleClick={ () =>  { \r\n                            if(!(width > 0) || !(height > 0) ){\r\n                                setShowAlert(true);\r\n                                return;\r\n                            }\r\n                            setShowAlert(false);\r\n\r\n                            calculate(); \r\n                            setNextStep(step.TILE_PERFORMANCE) \r\n                        }}/>\r\n                    </>);\r\n            case step.TILE_PERFORMANCE:\r\n                return (\r\n                    <>\r\n                        <div className='mb-4 text-center'>\r\n                            <Thumbnail kind={kind} x={50} y={50} handleClick={()=>{}}/>\r\n                        </div>\r\n                        <TitleScreen text='Enter tile performance'/>\r\n                        {enterTilePerfomance()}\r\n                        {showAlert && <Alert text='Await' description='Enter tile performance'/>}\r\n                        <Button text='Continue' handleClick={() => { \r\n                            if(tilePerformance <= 0){\r\n                                setShowAlert(true);\r\n                                return;\r\n                            }\r\n                            setShowAlert(false);\r\n\r\n                            Swal.fire({\r\n                                position: 'center-start',\r\n                                title: 'Thank you for tried it! ❤️',\r\n                                showConfirmButton: false,\r\n                                timer: 1500\r\n                            });\r\n                            getBoxToBuy(); \r\n                            setNextStep(step.SHOW_RESULT);\r\n                        }}/>\r\n                    </>);\r\n            case step.SHOW_RESULT:\r\n                return (\r\n                    <>\r\n                        <div className='mb-4 text-center'>\r\n                            <Thumbnail kind={kind} x={50} y={50} handleClick={()=>{}}/>\r\n                        </div>\r\n                        {showResult()}\r\n                        <Button text='Try again' handleClick={() => {\r\n                            cleanData();\r\n                            setNextStep(step.CHOOSE_FIGURE);\r\n                        }}/>\r\n                    </>);\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"w-full max-w-sm p-2\">\r\n            <h1 className='text-center font-bold text-lg p-6'>Tile Calculator</h1>\r\n            {renderStep()}\r\n        </div>\r\n    )\r\n}\r\n","export const calculateBoxToBuy = (tile, tilePerformance) => {\r\n    return Math.ceil(Math.round(((tile / tilePerformance) + Number.EPSILON) * 100) / 100);\r\n}\r\n\r\nexport const calculateArea = (kind, width, height) => {\r\n    let area;\r\n    switch (kind) {\r\n        case 'square':\r\n            area = width * height;\r\n            break;\r\n        case 'triangle':\r\n            area = (width * height) / 2\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    area = Math.round((area + Number.EPSILON) * 100) / 100;\r\n    return area;\r\n}\r\n\r\nexport const calculateTileNeeded = (area) => {\r\n    return Math.round(((area * 1.05) + Number.EPSILON) * 100) / 100;\r\n}","// import logo from './logo.svg';\nimport './App.css';\nimport { Calculator } from './pages/calculator/Calculator';\n\nfunction App() {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}